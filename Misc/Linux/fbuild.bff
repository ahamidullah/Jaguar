.ProjectDirectory = "$_WORKING_DIR_$"
.CodeDirectory = "$ProjectDirectory$/Code"
.DependencyDirectory = "$ProjectDirectory$/Dependency"

#import VulkanSDKDirectory

Settings
{
	.CachePath = "/tmp/FastBuildCache"
}

// @TODO: Document compiler options.
.ClangBaseConfig =
[
	.PlatformName = "Linux"
	.Compiler = "/usr/bin/clang++"
	.CompilerOptions =
		"%1 -o %2"
		+ " -I$CodeDirectory$"
		+ " -std=c++2a"
		+ " -ffast-math"
		+ " -fno-exceptions"
		+ " -Wall"
		+ " -Wextra"
		+ " -Wfatal-errors"
		+ " -Wcast-align"
		+ " -Wdisabled-optimization"
		+ " -Wformat=2"
		+ " -Winit-self"
		+ " -Wredundant-decls"
		+ " -Wstrict-overflow=2"
		+ " -Wswitch-enum"
		+ " -Wundef"
		+ " -Wno-unused"
		+ " -Wno-unused-parameter"
		+ " -Wno-varargs"
		+ " -Wno-cast-align"
		+ " -Wno-non-pod-varargs"
		+ " -Wno-sign-compare"
		+ " -Wno-missing-field-initializers"
		+ " -Wno-missing-braces"
		+ " -Wno-c99-designator"
	.Linker = "/usr/bin/clang++"
	.LinkerOptions = "%1 -o %2"
	.PCHOptions =
		"-Xclang -fno-pch-timestamp"
		+ " -x c++-header"
		+ " $CompilerOptions$"
]

.BinaryTypeLibrary = "Library"
.BinaryTypeExecutable = "Executable"

.ClangLibraryConfig =
[
	Using(.ClangBaseConfig)
	.BinaryType = "$BinaryTypeLibrary$"
	.CompilerOptions +
		" -fPIC"
		+ " -c"
	.LinkerOptions + " -shared"
	.PCHOptions + " -fPIC"
]

.ClangExecutableConfig =
[
	Using(.ClangBaseConfig)
	.BinaryType = "$BinaryTypeExecutable$"
	.CompilerOptions + " -c"
]

.BasicConfig =
[
	Using(.ClangLibraryConfig)
	.Module = "Basic"
]

.MediaConfig =
[
	Using(.ClangLibraryConfig)
	.Module = "Media"
]

.VulkanCompilerOptions =
	" -DVulkanBuild"
	+ " -I$VulkanSDKDirectory$/include"

.EngineConfig =
[
	Using(.ClangExecutableConfig)
	.Module = "Engine"
	.CompilerOptions + "$VulkanCompilerOptions$"
	.PCHOptions + "$VulkanCompilerOptions$"
	.LinkModules =
	{
		"Basic"
		"Media"
	}
	.LinkerOptions +
		" -lxcb"
		+ " -lxcb-keysyms"
		+ " -lxcb-xinput"
		+ " -lxcb-image"
		+ " -ldl"
		+ " -lm"
		+ " -lfreetype"
		+ " -lpthread"
]

.ModuleConfigs =
{
	.BasicConfig,
	.MediaConfig,
	.EngineConfig,
}

//
// Speed
//

.ClangDebugConfig =
[
	.Speed = "Debug"
	.CompilerOptions =
		" -O0"
		+ " -g"
		+ " -DDebugBuild"
]

.ClangOptimizedConfig =
[
	.Speed = "Optimized"
	.CompilerOptions =
		" -Ofast"
		+ " -DOptimizedBuild"
]

.ClangSpeedConfigs =
{
	.ClangDebugConfig,
	.ClangOptimizedConfig,
}

//
// Runtime
//

.ClangDevelopmentConfig =
[
	.Runtime = "Development"
	.CompilerOptions = " -DDevelopmentBuild"
]

.ClangReleaseConfig =
[
	.Runtime = "Release"
	.CompilerOptions = " -DReleaseBuild"
]

.ClangRuntimeConfigs =
{
	.ClangDevelopmentConfig,
	.ClangReleaseConfig,
}

//
// Extra
//

.ClangAddressSanitizerConfig =
[
	.Extra = "AddressSanitizer"
	.CompilerOptions =
		" -fsanitize=address"
		+ " -DAddressSanitizerBuild"
	.LinkerOptions = " -fsanitize=address"
	.PCHOptions = " -fsanitize=address"
]

.ClangThreadSanitizerConfig =
[
	.Extra = "ThreadSanitizer"
	.CompilerOptions =
		" -fsanitize=thread"
		+ " -mllvm -tsan-instrument-atomics=false"
		+ " -DThreadSanitizerBuild"
	.LinkerOptions = " -fsanitize=thread"
	.PCHOptions = " -fsanitize=thread"
]

.ClangExtraConfigs =
{
	.ClangAddressSanitizerConfig,
	.ClangThreadSanitizerConfig,
}

.Configs = {}

ForEach(.ModuleConfig in .ModuleConfigs)
{
	ForEach(.SpeedConfig in .ClangSpeedConfigs)
	{
		ForEach(.RuntimeConfig in .ClangRuntimeConfigs)
		{
			.Config = .ModuleConfig + .SpeedConfig + .RuntimeConfig
			Using(.Config)
			.BuildConfig =
			[
				.BuildTag = "$Module$-$PlatformName$-$Speed$-$Runtime$"
				.BuildDirectory = "$ProjectDirectory$/Build/$PlatformName$/$Speed$/$Runtime$"
			]
			.FinalConfig = .Config + .BuildConfig
			^Configs + .FinalConfig

			ForEach(.ExtraConfig in .ClangExtraConfigs)
			{
				.Config = .ModuleConfig + .SpeedConfig + .RuntimeConfig + .ExtraConfig
				Using(.Config)
				.BuildConfig =
				[
					.BuildTag = "$Module$-$PlatformName$-$Extra$-$Speed$-$Runtime$"
					.BuildDirectory = "$ProjectDirectory$/Build/$PlatformName$/$Extra$/$Speed$/$Runtime$"
				]
				.FinalConfig = .Config + .BuildConfig
				^Configs + .FinalConfig
			}
		}
	}
}

ForEach(.Config in .Configs)
{
	Using(.Config)

	Unity("$BuildTag$-Unity")
	{
		.UnityInputPath = "$CodeDirectory$/$Module$"
		.UnityOutputPath = "$BuildDirectory$/Code"
		.UnityOutputPattern = "$Module$Unity*.cpp"
	}

	ObjectList("$BuildTag$-Objects")
	{
		.PCHInputFile = "$CodeDirectory$/$Module$/PCH.h"
		.PCHOutputFile = "$BuildDirectory$/PCH/$Module$.pch"
		.CompilerInputUnity = "$BuildTag$-Unity"
		.CompilerOutputPath = "$BuildDirectory$/Objects"
		.CompilerOptions + " -include-pch $PCHOutputFile$"
	}

	If(.BinaryType == .BinaryTypeLibrary)
	{
		DLL("$BuildTag$-DLL")
		{
			.LinkerOutput = "$BuildDirectory$/Binary/lib$Module$.so"
			.Libraries = {"$BuildTag$-Objects"}
		}

		Alias("$BuildTag$")
		{
			.Targets = "$BuildTag$-DLL"
		}
	}

	If(.BinaryType == .BinaryTypeExecutable)
	{
		ForEach(.LinkModule in .LinkModules)
		{
			^LinkerOptions + " $BuildDirectory$/Binary/lib$LinkModule$.so"
		}
		Executable("$BuildTag$-EXE")
		{
			.LinkerOutput = "$BuildDirectory$/Binary/$Module$"
			.Libraries = {"$BuildTag$-Objects"}
		}

		Alias("$BuildTag$")
		{
			.Targets = "$BuildTag$-EXE"
		}
	}
}

Alias("All")
{
	.Targets =
	{
		"Basic-Linux-Debug-Development"
		"Media-Linux-Debug-Development"
		"Engine-Linux-Debug-Development"
	}
}

Alias("AddressSanitizer")
{
	.Targets =
	{
		"Basic-Linux-AddressSanitizer-Debug-Development"
		"Media-Linux-AddressSanitizer-Debug-Development"
		"Engine-Linux-AddressSanitizer-Debug-Development"
	}
}

Alias("ThreadSanitizer")
{
	.Targets =
	{
		"Basic-Linux-ThreadSanitizer-Debug-Development"
		"Media-Linux-ThreadSanitizer-Debug-Development"
		"Engine-Linux-ThreadSanitizer-Debug-Development"
	}
}
