// @TODO: Some kind of memory protection for the GPU buffer!

Load shaders at runtime.
Generate descriptor sets / uniform structs / pipeline loading code / uniform update code (uniform vec3 foo, update_vulkan_uniform(generated_foo_info, &foo_data))?

Shader permutations for missing maps.

subarenas, fiber job system, multithreading

text drawing

cleanup pass

basic animations
blending animations
IK
particle system dynamics

paralax occlusion mapping
ambient occlusion
gamma correction
HDR
tone mapping
per-object motion blur

occulsion culling

preprocessor

basic collision

debug ui

console

add basic sound

redo memory arenas - get rid of the concept of blocks and chunks -- just bump a pointer

Reduce matrix multiplies?

parralax occulusion mapping

get rid of all of the memory mapping in vulkan.c

reuse command buffers

vkpipelinecache

use per-thread vulkan pools

vulkan startup logging output

Much more robust mesh rendering.
	- Meshes without diffuse/specular/normal maps.

Color lighting.

Make asset/entity loading more robust.

Handle shader permutations.
	- Normals
	- Color
	- Albedo
	- Specular
	- Animation
	- Shadows

grant-schmidt

Get rid of malloc.

config file

environment mapping

basic reflections

animation blending

add multiscattering brdf

experiment with different diffuse/specular brdfs

hotload shaders

hotload materials

hotload meshes

move all raw asset loading code and includes to debug only

make sure game compiles without libc functions

DONE #############################################################################################################################
get rid of library.c

Stop using align_to so much.

normal mapping

add basic pbr

frustum culling

debug visuals: bounding sphere, frustum

Combine shaders into one file.
